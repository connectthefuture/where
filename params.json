{"name":"Where","tagline":"A remedy for function forgetfulness","body":"# where \r\n\r\nBrett Terpstra 2015, WTF license <http://wtflicense.com/>\r\n\r\n## Description\r\n\r\nFor people who spread bash functions and aliases across multiple sourced\r\nfiles and then can't track down where they defined them\r\n\r\n## Installation\r\n\r\nPlace both _where.bash and common.bash in the same folder in your $PATH.\r\n\r\n### Option 1: Hook `source`\r\n\r\nThis option will hook the Bash default `source` command and index shell scripts whenenver they're sourced from another file. \r\n\r\nAdd the following to your .bash_profile before any source commands are run:\r\n\r\n    export WHERE_HOOK_SOURCE=true\r\n    export WHERE_EXPIRATION=25200 # once a week\r\n    source /path/to/_where.bash\r\n\r\nIf you choose this option, see **Database refresh throttling** below.\r\n\r\n### Option 2: Curated indexing\r\n\r\n1. Source _where.sh in your .bash_profile prior to sourcing other files\r\n\r\n        source /path/to/_where.bash\r\n\r\n2. Add the following to the bottom of specific files to be indexed:\r\n\r\n        _where_from $BASH_SOURCE\r\n\r\nIndexing every file you source can slow down login, so option 2 may be ideal.\r\n\r\nYou can add the necessary line to every file in a folder and subfolders\r\nusing the `_where_add` function:\r\n\r\n    $ _where_add ~/scripts{,/**}/*.{,ba}sh\r\n\r\nRemove the lines using the _where_clean function:\r\n\r\n    $ _where_clean ~/scripts{,/**}/*.{,ba}sh\r\n\r\n## Usage\r\n\r\n    where [-kav] [function_name|search_pattern]\r\n\r\nOnce the database is built, you can use the `where` command to find your\r\nfunctions. Running `where` with no arguments will output a list of all\r\nregistered plugins and aliases.\r\n\r\nAdd an argument to filter for a specific function or alias. By default\r\nonly exact matches will return. If an exact match is found, just the\r\nfile path of the originating script will be returned.\r\n\r\n### Options\r\n\r\n    -k   Show all functions and aliases containing filter text\r\n    -a   Show all functions and aliases fuzzy matched\r\n    -v   Verbose output\r\n    -n   Suppress line number in paths\r\n    -E   Edit result\r\n    -h   Show this screen\r\n\r\nThe -k switch turns on \"apropos\" mode, which lets you find any function\r\ncontaining the filter string in its name.\r\n\r\nThe -a switch takes \"apropos\" a step further, using the filter argument\r\nas a fuzzy search string. It will match any functions/arguments containing\r\nthe characters in the search string in sequence, but they do not need\r\nto be contiguous.\r\n\r\nIf -a is specified, -k is ignored in the arguments.\r\n\r\n-E causes $EDITOR to be opened with the path to the file containing\r\nthe searched function. -E does not work with -k or -a.\r\n\r\n### Aliases\r\n\r\n`where?` is equivalent to `where -k`\r\n`where*` is equivalent to `where -a`\r\n\r\n## Configuration\r\n\r\n### Database location\r\n\r\nYou can customize the location of the text file `where` uses with the\r\nenvironment variable `WHERE_FUNCTIONS_FROM_DB`. Set it before sourcing\r\nthe script in `~/.bash_profile`:\r\n\r\n    export WHERE_FUNCTIONS_FROM_DB=/new/path/filename\r\n\r\n### Source hook\r\n\r\nTo enable `where` to automatically index any file sourced in your\r\nconfiguration, set the `WHERE_HOOK_SOURCE` variable to true before\r\nsourcing `_where.bash` in `~/.bash_profile`:\r\n\r\n    export WHERE_HOOK_SOURCE=true\r\n\r\n### Database refresh throttling\r\n\r\nSet an expiration threshhold on the database with `WHERE_EXPIRATION`.\r\nThe threshhold is in seconds, where one day is 3600. If `where` is\r\ninitialized within the thresshold since last update, it won't index\r\nthe files again.\r\n\r\n    export WHERE_EXPIRATION=3600\r\n\r\nYou can force a database refresh with `_where_reset` on the command line. This will clear your database and set an update marker for the current time.\r\n","google":"UA-34296025-1","note":"Don't delete this file! It's used internally to help with page regeneration."}